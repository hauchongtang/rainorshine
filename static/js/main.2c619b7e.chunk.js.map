{"version":3,"sources":["api/index.js","components/map/map.jsx","App.js","index.js"],"names":["fetchData","a","axios","get","response","modifiedData","area","data","area_metadata","info","items","console","log","Maps","useState","areaData","setArea","infoData","setInfo","valid","setValid","current","setPosition","curr","setPos","location","setLocation","useEffect","navigator","geolocation","getCurrentPosition","position","positions","coords","latitude","longitude","lat","long","fetchedData","forecasts","valid_period","fetchAPI","map","item","index","weather","degToRad","deg","Math","PI","pythagorasEquiRectangular","lat1","lon1","lat2","lon2","x","y","sqrt","number","closest","minDif","i","length","dif","label_location","nearestPoint","areaArr","forecastArr","forecast","id","Card","CardBody","Date","start","toLocaleTimeString","end","Map","center","zoom","TileLayer","url","attribution","Marker","CircleMarker","key","name","onClick","radius","color","Popup","onClose","href","App","className","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2c619b7e.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport const fetchData = async () => {\r\n  try {\r\n    const url = 'https://api.data.gov.sg/v1/environment/2-hour-weather-forecast';\r\n    const response = await axios.get(url);\r\n    const modifiedData = {\r\n      area: response.data.area_metadata,\r\n      info: response.data.items[0]\r\n    }\r\n    return modifiedData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { Map, Popup, TileLayer, CircleMarker, Marker } from 'react-leaflet';\r\nimport { Card, CardBody, CardTitle, CardText, Navbar, NavbarBrand } from 'reactstrap';\r\n\r\nimport { fetchData } from '../../api/index';\r\n\r\nimport './map.css';\r\n\r\nconst Maps = () => {\r\n  const [areaData, setArea] = useState([]);\r\n  const [infoData, setInfo] = useState([]);\r\n  const [valid, setValid] = useState([]);\r\n  const [current, setPosition] = useState([1.3521, 103.8198]);\r\n  const [curr, setPos] = useState({});\r\n  const [location, setLocation] = useState(false);\r\n  useEffect(() => {\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      const positions = ([position.coords.latitude, position.coords.longitude]);\r\n      setPosition(positions)\r\n      setPos({ lat: position.coords.latitude, long: position.coords.longitude });\r\n    })\r\n    const fetchAPI = async () => {\r\n      const fetchedData = await fetchData();\r\n      const { area, info } = fetchedData;\r\n      setArea(area);\r\n      setInfo(info.forecasts);\r\n      setValid(info.valid_period);\r\n    }\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  areaData.map((item, index) => item.weather = infoData[index]);\r\n\r\n  const degToRad = (deg) => {\r\n    return deg * Math.PI / 180;\r\n  }\r\n\r\n  const pythagorasEquiRectangular = (lat1, lon1, lat2, lon2) => {\r\n    lat1 = degToRad(lat1);\r\n    lat2 = degToRad(lat2);\r\n    lon1 = degToRad(lon1);\r\n    lon2 = degToRad(lon2);\r\n    var R = 6371;\r\n    var x = (lon2 - lon1);\r\n    var y = (lat2 - lat1);\r\n    var d = Math.sqrt(x * x + y * y) * R;\r\n    return d;\r\n  }\r\n\r\n  const nearestPoint = (latitude, longitude) => {\r\n    var minDif = 99999;\r\n    var closest;\r\n    for (let i = 0; i < areaData.length; ++i) {\r\n      var dif = pythagorasEquiRectangular(latitude, longitude,\r\n        areaData.map((item) => item.label_location.latitude)[i],\r\n        areaData.map(item => item.label_location.longitude)[i]);\r\n      if (dif < minDif) {\r\n        closest = i;\r\n        minDif = dif;\r\n      }\r\n    }\r\n    return closest;\r\n  }\r\n\r\n  const number = nearestPoint(curr.lat, curr.long);\r\n  const areaArr = infoData.map(item => item.area)\r\n  const forecastArr = infoData.map(item => item.forecast)\r\n  return (\r\n    <>\r\n      <h4 id='weather'>2 Hourly Forecast</h4>\r\n      <div>\r\n        <Card>\r\n          <CardBody>\r\n            <h3>{areaArr[number]}</h3>\r\n            <p id='timestamp'>{new Date(valid.start).toLocaleTimeString()}&nbsp;to&nbsp;{new Date(valid.end).toLocaleTimeString()}</p>\r\n            <h6>{forecastArr[number]}</h6>\r\n          </CardBody>\r\n        </Card>\r\n      </div>\r\n      <h5></h5>\r\n      <Map center={current} zoom={12}>\r\n        <TileLayer\r\n          url='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\r\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {\r\n          <Marker position={current}></Marker>\r\n        }\r\n        {\r\n          areaData.map(item => {\r\n            return (\r\n              <CircleMarker\r\n                key={item.name}\r\n                center={[\r\n                  item.label_location.latitude,\r\n                  item.label_location.longitude\r\n                ]}\r\n                onClick={() => setLocation(item)}\r\n                radius={12}\r\n                color={'purple'}\r\n              />\r\n            )\r\n          })\r\n        }\r\n        {\r\n          location && (\r\n            <Popup\r\n              position={[location.label_location.latitude, location.label_location.longitude]}\r\n              onClose={() => setLocation(false)}\r\n            >\r\n              <h1>{location.name}</h1>\r\n              <p>{location.weather.forecast}</p>\r\n            </Popup>\r\n          )\r\n        }\r\n      </Map>\r\n      <h5></h5>\r\n      <Card>\r\n        <CardBody>\r\n          <h3>Features</h3>\r\n          <p>- Quick check of the weather before heading out for outdoor activities.</p>\r\n          <p>- If you enable location, you can see your nearest weather station.</p>\r\n          <h3>Source</h3>\r\n          - <a href='https://data.gov.sg/'>data.gov.sg</a>\r\n          <h3>Code</h3>\r\n          - <a href='https://github.com/hauchongtang/rainorshine'>GitHub</a>\r\n        </CardBody>\r\n      </Card>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Maps;","import React from 'react';\r\nimport Map from './components/map/map';\r\n\r\nimport './App.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className='container'>\r\n      <Map />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}